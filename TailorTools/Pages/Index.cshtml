@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}


<div class="container">
    
</div>
<div class="container">
    <div class="row">
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">Put your meta data here:</div>
                <div class="panel-body" id="pasteMeta">
                    <textarea id="txtScript" autofocus onfocus="this.select();" rows="15"
                              onkeyup="if(event.keyCode==13) parseScript();"
                              onchange="parseScript();">Paste your C# DTO class or sql "CREATE TABLE" script here...</textarea>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">DTO</div>
                <div class="panel-body" id="classDTO"></div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">Create table</div>
                <div class="panel-body" id="createTable"></div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">Select Insert statements</div>
                <div class="panel-body" id="selectInsert"></div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">C# Insert</div>
                <div class="panel-body" id="csInsert"></div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">C# Set sql parameters</div>
                <div class="panel-body" id="csSetParameters"></div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">C# Sql decorated DTO</div>
                <div class="panel-body" id="csSqlDecoratedDTO"></div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">C# SqlBulkCopy column mappings</div>
                <div class="panel-body" id="csColumnMappings"></div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">C# enumerator GetValue switch</div>
                <div class="panel-body" id="csEnumeratorSwitch"></div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">C# enumerator GetOrdinal switch</div>
                <div class="panel-body" id="csEnumeratorOrdinal"></div>
            </div>
        </div>
    </div>
</div>
    @section Scripts
        {
        <script>
            document.onload = function init() {
                document.getElementById("txtScript").select();
            }

            function parseScript() {
                var txtScript = document.getElementById('txtScript');
                var xmlhttp = new XMLHttpRequest();
                var url = "/?handler=Class";
                var param = "script=" + encodeURI(txtScript.value);

                xmlhttp.open("POST", url, true);
                xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                xmlhttp.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        var classMeta = JSON.parse(this.responseText);
                        handeClassMetaData(classMeta);
                    }
                };
                xmlhttp.send(param);
            }

            function handeClassMetaData(classMeta) {
                var classDTO = document.getElementById('classDTO'),
                    createTable = document.getElementById('createTable'),
                    selectInsert = document.getElementById('selectInsert'),
                    csInsert = document.getElementById('csInsert'),
                    csSetParameters = document.getElementById('csSetParameters'),
                    csColumnMappings = document.getElementById('csColumnMappings'),
                    csEnumeratorOrdinal = document.getElementById('csEnumeratorOrdinal'),
                    csEnumeratorSwitch = document.getElementById('csEnumeratorSwitch'),
                    csSqlDecoratedDTO = document.getElementById('csSqlDecoratedDTO');

                classDTO.innerHTML = templateCreateClass(classMeta, false);
                selectInsert.innerHTML = templateSelectInsert(classMeta);
                createTable.innerHTML = templateCreateTable(classMeta);
                csInsert.innerHTML = templateInsertDTO(classMeta);
                csSetParameters.innerHTML = '';
                csColumnMappings.innerHTML = templateBulkCopyColumnMappings(classMeta);
                csEnumeratorOrdinal.innerHTML = templateEnumeratorOrdinal(classMeta);
                csEnumeratorSwitch.innerHTML = templateEnumeratorSwitch(classMeta);
                csSqlDecoratedDTO.innerHTML = templateCreateClass(classMeta, true);
            }

            function propertyList(classMeta, prefix, postfix, separator) {
                var s = [];
                for (var i = 0; i < classMeta.properties.length; i++) {
                    if (prefix)
                        s.push(prefix);
                    s.push(classMeta.properties[i].name);
                    if (postfix)
                        s.push(postfix);
                    if (i + 1 < classMeta.properties.length)
                        s.push(separator);
                }
                return s.join('');
            }

            function templateInsertDTO(classMeta) {
                var s = [],
                    lf = '<br>',
                    tab = '&nbsp;&nbsp;&nbsp;&nbsp;';
                s.push(tab + 'var sql = @@"INSERT INTO ' + classMeta.name + ' (' + lf);
                s.push(propertyList(classMeta, tab + tab + tab, null, ',' + lf));
                s.push(')' + lf);
                s.push(tab + tab + 'VALUES (' + lf);
                s.push(propertyList(classMeta, tab + tab + tab + '@@', null, ',' + lf));
                s.push(')";' + lf);
                return s.join('');
            }

            function templateBulkCopyColumnMappings(classMeta) {
                var s = [],
                    lf = '<br>';
                for (var i = 0; i < classMeta.properties.length; i++) {
                    s.push('bulkCopy.ColumnMappings.Add(new SqlBulkCopyColumnMapping("');
                    s.push(classMeta.properties[i].name);
                    s.push('", "');
                    s.push(classMeta.properties[i].name);
                    s.push('"));' + lf);
                }
                s.push('}' + lf);
                return s.join('');
            }

            function templateEnumeratorSwitch(classMeta) {
                var s = [],
                    lf = '<br>',
                    tab = '&nbsp;&nbsp;&nbsp;&nbsp;';
                s.push(tab + 'switch (i)' + lf);
                s.push(tab + '{' + lf);
                for (var i = 0; i < classMeta.properties.length; i++) {
                    s.push(tab + tab + 'case ' + i + ':' + lf);
                    s.push(tab + tab + tab + 'return _enumerator.Current.' + classMeta.properties[i].name + ';' + lf);
                }
                s.push(tab + '}' + lf);
                return s.join('');
            }

            function templateEnumeratorOrdinal(classMeta) {
                var s = [],
                    lf = '<br>',
                    tab = '&nbsp;&nbsp;&nbsp;&nbsp;';
                s.push(tab + 'switch (name)' + lf);
                s.push(tab + '{' + lf);
                for (var i = 0; i < classMeta.properties.length; i++) {
                    s.push(tab + tab + 'case "' + classMeta.properties[i].name + '":' + lf);
                    s.push(tab + tab + tab + 'return ' + i + ';' + lf);
                }
                s.push(tab + '}' + lf);
                return s.join('');
            }

            function templateCreateClass(classMeta, decorate) {
                var s = [],
                    lf = '<br>',
                    tab = '&nbsp;&nbsp;&nbsp;&nbsp;',
                    maxLength = function (length) {
                        return length > 0 ? ', maxLength: ' + length : '';
                    },
                    defaultValue = function (prop) {
                        if (prop.nullable === false) {
                            if (prop.type == "DateTime")
                                return ' = new DateTime(1900, 1, 1)';
                            if (prop.type == "string")
                                return ' = ""';
                            if (prop.type == "byte[]")
                                return ' = new byte[0]';
                        }
                        return '';
                    },
                    sqlPrepare = function (prop) {
                        if (prop.type == "string")
                            return '.SqlPrepare(' + prop.length + ', ' + prop.nullable + ')';
                        if (prop.type == "DateTime")
                            return '.SqlPrepare()';
                        return '';
                    },
                    decoration = function (prop) {
                        return '[A1Field("' + prop.name + '", colType: SqlDbType.' + sqlServerDbType(prop) + maxLength(prop.length) + ', nullable: ' + prop.nullable + ')]';
                    };
                s.push('public class ' + classMeta.name);
                s.push(lf);
                s.push('{' + lf);
                for (var i = 0; i < classMeta.properties.length; i++) {
                    if (i > 0)
                        s.push(lf);

                    // Field
                    s.push(tab + 'private ');
                    s.push(cSharpType(classMeta.properties[i]) + ' _');
                    s.push(classMeta.properties[i].name);
                    s.push(defaultValue(classMeta.properties[i]));
                    s.push(';' + lf);

                    // Attribute
                    if (decorate)
                        s.push(tab + decoration(classMeta.properties[i]) + lf);

                    //Property
                    s.push(tab + 'public ');
                    s.push(cSharpType(classMeta.properties[i]) + ' ');
                    s.push(classMeta.properties[i].name);
                    s.push(' { get => _' + classMeta.properties[i].name + '; set => _' + classMeta.properties[i].name + ' = value' + sqlPrepare(classMeta.properties[i]) + '; }');
                    s.push(lf);
                }
                s.push('}' + lf);
                return s.join('');
            }

            function templateSelectInsert(classMeta) {
                var s = [],
                    lf = '<br>',
                    toSelectString = function (p) {
                        switch (p.type) {
                            case "string":
                                return "''' + " + p.name + " + '''";
                            case "DateTime":
                                return "''' + CONVERT(varchar, " + p.name + ", 127) + '''";
                            default:
                                return "' + CONVERT(varchar, " + p.name + ") + '";
                        }
                    };
                s.push("SELECT 'INSERT INTO " + classMeta.name + " (");
                for (var i = 0; i < classMeta.properties.length; i++) {
                    s.push(classMeta.properties[i].name);
                    if (i + 1 < classMeta.properties.length)
                        s.push(', ');
                }
                s.push(")'" + lf + "+ ' VALUES (");
                for (var i = 0; i < classMeta.properties.length; i++) {
                    s.push(toSelectString(classMeta.properties[i]));
                    if (i + 1 < classMeta.properties.length)
                        s.push(', ');
                }
                s.push(")'" + lf + "FROM " + classMeta.name);

                return s.join('');
            }

            function templateCreateTable(classMeta) {
                var s = [],
                    lf = '<br>',
                    tab = '&nbsp;&nbsp;&nbsp;&nbsp;',
                    defaultValue = function (p) {
                        switch (p.type) {
                            case "long":
                                return "0";
                            case "int":
                                return "0";
                            case "short":
                                return "0";
                            case "byte":
                                return "0";
                            case "bool":
                                return "0";
                            case "string":
                                return "''";
                            case "byte[]":
                                return "''";
                            case "Guid":
                                return "NewId()";
                            case "DateTime":
                                return "CONVERT(datetime, '19000101')";
                            case "decimal":
                                return "0.0";
                            default:
                                return "";
                        }
                    },
                    sqlServerType = function (p) {
                        switch (p.type) {
                            case "long":
                                return "bigint";
                            case "int":
                                return "int";
                            case "short":
                                return "smallint";
                            case "byte":
                                return "tinyint";
                            case "bool":
                                return "bit";
                            case "string":
                                return "nvarchar(" + p.length + ")";
                            case "byte[]":
                                return "varbinary(max)";
                            case "Guid":
                                return "uniqueidentifier";
                            case "DateTime":
                                return "datetime";
                            case "decimal":
                                return "decimal(" + p.length + "," + p.precision + ")";
                            default:
                                return "void";
                        }
                    };
                s.push("CREATE TABLE " + classMeta.name + " (" + lf);
                for (var i = 0; i < classMeta.properties.length; i++) {
                    s.push(tab);
                    s.push(classMeta.properties[i].name);
                    s.push(' ');
                    s.push(sqlServerType(classMeta.properties[i]));
                    if (classMeta.properties[i].nullable === false) {
                        s.push(' NOT NULL DEFAULT ' + defaultValue(classMeta.properties[i]));
                    }
                    if (i + 1 < classMeta.properties.length)
                        s.push(',' + lf);
                }
                s.push(")" + lf);
                return s.join('');
            }

            sqlServerDbType = function (p) {
                switch (p.type) {
                    case "long":
                        return "BigInt";
                    case "int":
                        return "Int";
                    case "short":
                        return "SmallInt";
                    case "byte":
                        return "TinyInt";
                    case "bool":
                        return "Bit";
                    case "string":
                        return "NVarChar";
                    case "byte[]":
                        return "VarBinary";
                    case "Guid":
                        return "UniqueIdentifier";
                    case "DateTime":
                        return "DateTime";
                    case "decimal":
                        return "Decimal";
                    case "numeric":
                        return "Decimal";
                    default:
                        return "void";
                }
            };

            cSharpType = function (p) {
                switch (p.type) {
                    case "string":
                        return p.type;
                    case "byte[]":
                        return p.type;
                    default:
                        return p.type + (p.nullable === true ? "?" : "");
                }
            };


        </script>
    }
